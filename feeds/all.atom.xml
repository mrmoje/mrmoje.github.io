<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TDT</title><link href="http://tdt.rocks/" rel="alternate"></link><link href="http://tdt.rocks/feeds/all.atom.xml" rel="self"></link><id>http://tdt.rocks/</id><updated>2019-09-10T03:25:00+03:00</updated><entry><title>WiFi Python PowerStrip (PART1 - The Hardware)</title><link href="http://tdt.rocks/uPy_powerstrip_part1.html" rel="alternate"></link><published>2019-09-10T03:25:00+03:00</published><updated>2019-09-10T03:25:00+03:00</updated><author><name>James Nzomo</name></author><id>tag:tdt.rocks,2019-09-10:/uPy_powerstrip_part1.html</id><summary type="html">&lt;p&gt;A powerstrip that runs Python 3 and features IEEE 802.11 b/g/n Wi-Fi. Controllable via LAN and the Internet!&lt;/p&gt;</summary><content type="html">&lt;h1&gt;INTRO&lt;/h1&gt;
&lt;p&gt;The powerstrip pictured below (fig.1) runs Python 3 and features IEEE 802.11 b/g/n Wi-Fi.
With the right python script(s) loaded, you can toggle each port over LAN and
with the right networking setup you can do the same, over the Internet from anywhere in the world
&lt;img class="emoji" alt="sunglasses" height="20" width="20" style="display: inline;"
src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png"&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img alt="THE SETUP" src="img/uPy_powerstrip/uPy_powerstrip.jpg" title="THE SHIZNIT"&gt;
&lt;strong&gt;&lt;em&gt;fig.1 The shiznit.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Prelude&lt;/h1&gt;
&lt;p&gt;Sometime late 2016, our Head of Dept put out an &lt;a href="https://en.wikipedia.org/wiki/Request_for_proposal"&gt;RFP&lt;/a&gt; for a python related
presentation/workshop that we were tasked to come up with and having hobbied a bit with MicroPython on
&lt;a href="https://en.wikipedia.org/wiki/System_on_a_chip"&gt;SoCs&lt;/a&gt;, I thought I'd field something on the topic.
We thus came up with a lightshow of desklamps toggled by rudimentary prototype-esque hardware all
controlled by Python. During the presentation session, after taking them through MicroPython
internals, the participants had a bit of fun scripting arbitrary light patterns/sequences in python.
Informative and fun.&lt;/p&gt;
&lt;p&gt;Few months later, we ran a remix of the session for our &lt;a href="https://twitter.com/nairobitechweek/status/844512757219295233"&gt;MOB Programming Workshop&lt;/a&gt;
at &lt;a href="http://nairobitechweek.com/"&gt;Nairobi Tech Week 2017&lt;/a&gt;, toggling connected desklamps by tweeted hashtags and
again 2 years later, for one of our &lt;a href="https://www.meetup.com/Python-Nairobi/events/cqbkrqyzhbxb/"&gt;Python-Nairobi Meetups&lt;/a&gt; with refined hardware
(Pictured in fig.1 above), which I'll discuss here.&lt;/p&gt;
&lt;p&gt;If you're keen to checkout the schematics, &lt;a href="https://easyeda.com/editor#id=cc7ad7dc7a6d46a1a5b45dc8515a1653"&gt;click here for the EASYEDA_PROJECT&lt;/a&gt;.
Plenty of context therein for this article as I'll be discussing the main components that make it work below.&lt;/p&gt;
&lt;p&gt;But first.....&lt;/p&gt;
&lt;h1&gt;Some words of caution&lt;/h1&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="JITAHADHARI" src="img/uPy_powerstrip/tahadhari.jpg" title="HIGH VOLTAGE WARNINGS"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This article describes the design and construction of the above described gizmo for
the sole purpose of demonstrating what's possible with off the shelf tech described herein.&lt;/p&gt;
&lt;p&gt;The concepts and design behind the subject device are of hobby quality. They have not been
fully thought through and do not adhere to any safety standards.
The device is neither suitable nor intended for any use ("production" or otherwise)
apart from illustrating what's possible.&lt;/p&gt;
&lt;p&gt;This project involves working with mains electricity. This can be fatal!
Replicate at your own risk! And if you do, make it under the supervision of an expert in the field
or electronics and or cardiopulmonary resuscitation (CPR).
&lt;center&gt;
(This line will be "&lt;code&gt;s/f/r/g&lt;/code&gt;" with a link to a safer design, sans all hi voltage stuff.&lt;br&gt;Keep your eyes peeled)
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now that that's out of the way, lets talk about the thing from the heart of it all the way up to the mains.&lt;/p&gt;
&lt;h1&gt;The Heart of it - ESP12&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://www.esp8266.com/wiki/doku.php?id=esp8266-module-family#esp-12"&gt;ESP12&lt;/a&gt; (fig.2 below) is really a ESP8266EX nicely soldered onto a 24x16mm breakout board with a
PCB trace WiFi antenna, oscillator, SPI flash memory and a few passives all tucked away under
a nice square FCC approved RFI shield. I got the AI-Thinker ones. &lt;a href="https://wiki.ai-thinker.com/_media/esp8266/a014ps01.pdf"&gt;Checkout their datasheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ESP12_PIC" src="img/uPy_powerstrip/esp12.jpg" title="ESP12"&gt;
&lt;strong&gt;&lt;em&gt;fig.2 ESP12 in schematic (left). Example AI Thinker ESP-12 PCB right.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the core of it is the mentioned &lt;a href="https://www.espressif.com/products/hardware/esp8266ex/overview/"&gt;ESP8266EX&lt;/a&gt; (fig.3 below), a system-on-chip (SoC) ic that integrates (among other things):-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Tensilica L106 32-bit RISC processor clocked at 80MHz (capable of up to 160MHz if it left the factory defect free)&lt;/li&gt;
&lt;li&gt;80kB of ram but you only get to work with max 50kB for your data.&lt;/li&gt;
&lt;li&gt;a 2.4 GHz transceiver radio for Wi-Fi&lt;/li&gt;
&lt;li&gt;and many other things:-&lt;a href="https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_en.pdf"&gt;checkout the datasheet&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ESP8266_PIC" src="img/uPy_powerstrip/esp8266_esp3.png" title="ESP8266 on an ESP-03 PCB"&gt;
&lt;strong&gt;&lt;em&gt;fig.3 ESP8266EX (circled in green) on an ESP-03 PCB. USB male connector to the left for size comparison&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meager as it sounds, this SoC is beefy enough to run its own &lt;a href="https://micropython.org"&gt;MicroPython&lt;/a&gt; port
that provides a python3 interface to all the features within including Wi-Fi and all usable
11 GPIO pins, 4 of which we will use to control each outlet on our powerstrip.
(The 4 being GPIOs 12, 13, 14 and 16, see schematic in fig.2 above)&lt;/p&gt;
&lt;p&gt;Operation is simple:- pull any of those 4 pins high (from code) and the respective outlet
gets toggled on via a Solid State Relay (SSR from here on).
The outcome of reverse is implicit, pull a pin low, off goes the corresponding outlet.&lt;/p&gt;
&lt;h1&gt;Controlling mains - The SSR&lt;/h1&gt;
&lt;p&gt;To switch the live pin on each outlet, I decided to go with the first capable
(and affordable) SSR I could find on &lt;a href="https://store.nerokas.co.ke/index.php?route=product/product&amp;amp;product_id=1886"&gt;Nerokas&lt;/a&gt;:- the &lt;a href="https://store.nerokas.co.ke/index.php?route=product/product&amp;amp;product_id=1886"&gt;G3MB-202P&lt;/a&gt;,
one for each outlet.
NB:- It's now discontinued. Successor as at time of this writing is OMRON's G3MC series PCB SSR.
Other manufacturers offer good replacements.&lt;/p&gt;
&lt;p&gt;&lt;img alt="G3MB-202P_PIC" src="img/uPy_powerstrip/G3MB-202P_plus_schematic.jpg" title="G3MB-202P and Typical ssr schematic"&gt;
&lt;strong&gt;&lt;em&gt;fig.4 Left:- OMRON G3MB-202P SSR. Right:- schematic of typical SSR&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Coming in a nice compact 20x24.5x5.5mm package and capable of max 2 Amps thru the high voltage side,
It's more than good enough for the job since we are only going to switch 240V 3-Watt LED lamps with it.
&lt;strong&gt;&lt;em&gt;(For the murrcans, mm here = millimeters. For moonlanding units, divide by 25.4. Also, Apollo used SI units for the critical stuff)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another nice thing is that it provides opto-isolation out of the box. Yaani the low and high voltage side
are electronically isolated by an &lt;a href="https://en.wikipedia.org/wiki/Opto-isolator"&gt;optocoupler&lt;/a&gt; and all it asks for is 5V to power
its internal IR LED.&lt;/p&gt;
&lt;p&gt;Operation is simple, supply 5V to pins &lt;code&gt;3(+)&lt;/code&gt; &amp;amp; &lt;code&gt;4(-)&lt;/code&gt;, and the HV side, pins &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;, complete the AC circuit for you.
Very oversimplified SSR operation but I'd like to keep the article simple. If you want more detail on how
the thing operates, &lt;a href="https://www.ia.omron.com/data_pdf/guide/18/ssr_tg_e_9_2.pdf"&gt;check this guide out&lt;/a&gt;. Also, good thing to keep in mind
a few &lt;a href="https://omronfs.omron.com/en_US/ecb/products/pdf/precautions_ssr.pdf"&gt;PRECAUTIONS&lt;/a&gt; for the component. (useful should you decide to replicate)&lt;/p&gt;
&lt;p&gt;There is one small prollem however, our ESP12 will only put out 3.3V from any of the said 4 GPIO pins
which is insufficient to switch on our SSR. When any of those GPIO pins go high at 3.3V, we need to convert
that to a 5V input for the SSR to fully power on (see the datasheet). Thus we require a logic level
converter of sorts!&lt;/p&gt;
&lt;h1&gt;Logic level conv - ESP12 =&amp;gt; BC547 =&amp;gt; SSR&lt;/h1&gt;
&lt;p&gt;To carry out the 3.3V to 5V conversion, I chose a NPN transistor as a "low side" switch and settled
on the BC547 because I had plenty at home not to mention that it's also quite a capable component for the job.&lt;/p&gt;
&lt;p&gt;&lt;img alt="BC547_G3MB-202P_PIC" src="img/uPy_powerstrip/BC547_G3MB-202P.jpg" title="BC547_G3MB-202P_SCHEMATIC"&gt;
&lt;strong&gt;&lt;em&gt;fig.4 Left:- BC547 (Q4) in schematic as low side switch. Right:- A bunch of BC547s under a magnifying glass.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just to show it's a good fit, the chosen SSR's IR LED draws 10mA at 5V, which &lt;a href="https://www.onsemi.com/pub/Collateral/BC546-D.PDF"&gt;(looking at the datasheet)&lt;/a&gt;
is well below the BC547's &lt;code&gt;I&lt;sub&gt;c&lt;/sub&gt;(max)&lt;/code&gt; of 0.1A and &lt;code&gt;V&lt;sub&gt;ceo&lt;/sub&gt;(max)&lt;/code&gt; of 45V.
Also, the ESP8266 can supply max 12mA of current, which is more than the 1mA the BC547 requires for
&lt;code&gt;I&lt;sub&gt;b&lt;/sub&gt;&lt;/code&gt; in order to supply the SSR's LED with the 10mA it needs &lt;code&gt;(I&lt;sub&gt;b&lt;/sub&gt; = I&lt;sub&gt;c&lt;/sub&gt;/10 = 1mA)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For good measure, lets "cap" that base current at 2.5mA like so:- When &lt;code&gt;I&lt;sub&gt;c&lt;/sub&gt; = 10mA&lt;/code&gt;, &lt;code&gt;V&lt;sub&gt;be&lt;/sub&gt;(sat) = .72V&lt;/code&gt;
and with the ESP supplying 3.3V on each GPIO pin we drop 2.58V with a resistor whose value will
be &lt;code&gt;R = V/I = 2.58V/0.0025A = 1032Ω&lt;/code&gt;.
To make things simple, 1KΩ resistor would suffice - Brown-Black-Red and hopefully the 5%-Gold will take
care of the 32Ω change (or not).&lt;/p&gt;
&lt;h1&gt;Power supply&lt;/h1&gt;
&lt;p&gt;The power strip gets its supply from 240V mains (in my side of the world), but how do we light up the 5V SSR and 3.3V ESP12?
We could populate the PCB with a transformer and some rectification extras but we're pressed for space on
the board and in our enclosure.&lt;/p&gt;
&lt;p&gt;Enter the &lt;a href="http://www.hlktech.net/product_detail.php?ProId=54"&gt;HLK-PM01&lt;/a&gt; (fig.5 below), an ultra-compact power module that comes in at 34mmx20mmx15mm.
It takes in 90 to 264V and supplies 5V at max 0.6A current with output noise of "i didn't check"/"not worried about it" decibels.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HLK_PM01" src="img/uPy_powerstrip/HLK_PM01_PIC.jpg" title="HLK_PM01_PIC"&gt;
&lt;strong&gt;&lt;em&gt;fig.5 ultra-compact 5V power supply module.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is more than enough to run all the things on the board and then some, but just for fun let's look at ballpark calculations:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4x OMRON SSR Opto IR LED coming in at total 10mA x4 = 40mA&lt;/li&gt;
&lt;li&gt;1x ESP12 at about 80mA average operating voltage (spikes can be taken care of by a CAP yes???)&lt;/li&gt;
&lt;li&gt;4x ESP12 pin current draw at total 12mA x4 = 48mA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far we have 168mA. Add a very very generous 200mA for misc stuff on the board and you have 368mA...well within what the
HLK module can supply.&lt;/p&gt;
&lt;p&gt;Finally for our 3.3V ESP12, we step that HLK's 5V down with a linear voltage regulator - the L78L33 which does max 100mA.
With a good enough CAP to sort out the ESP's current spikes, we have our rudimentary powersupply sorting all our electronics.&lt;/p&gt;
&lt;h1&gt;The Enclosure&lt;/h1&gt;
&lt;p&gt;One of the goals of this project was to have everything neatly tucked away into an off the shelf powerstrip enclosure.
At a local supermarket, I stumbled upon a &lt;a href="https://sollatek.co.ke/shop/domestic-power-control/voltsafe/multiguard-mg-4u/"&gt;Solatek MG-4U&lt;/a&gt; - a 4 port power strip (fig. 5 below)
with enough room for a 72mmx52mm PCB with 25mm height for components (once you chuck the 3 MoV surge protector in it)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="MG4-4U" src="img/uPy_powerstrip/MG-4U.jpg" title="MG-4U"&gt;
&lt;strong&gt;&lt;em&gt;fig.6 mg4u powerstrip.&lt;/em&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The strip has a nice rigid coper live rail that runs the length of all 4 ports. If you subdivide into 4 there will
still be enough plastic standoff to hold each port section sturdy-well.
On each of these pieces, there should be enough real estate to neatly solder a 16 AWG wire which we will connect
to the respective SSR via screw terminal.&lt;/p&gt;
&lt;p&gt;With the earth and neutral rails left intact, supply the board with AC power on he screw terminal X3, routing live thru X3.2
and tapping neutral at X3.1.&lt;/p&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Checkout schematic on easyeda here:- &lt;a href="https://easyeda.com/editor#id=cc7ad7dc7a6d46a1a5b45dc8515a1653"&gt;EASYEDA_PROJECT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stay tuned for part 2 [3, [4, [5]]] where we look at interesting use cases (including voice control)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the meantime, here is a low res vidya of the thing running a python script that does a round robin toggle for all 4 ports&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;video height="320" controls&gt;
    &lt;source src="vid/uPy_powerstrip/round_robin.mp4" type="video/mp4"&gt;
    You seem to be from 1995. Browser does not support the video tag.
  &lt;/video&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Here's the script that does the above business:-&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;machine&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;utime&lt;/span&gt;


&lt;span class="n"&gt;pins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onseq&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;utime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;offseq&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;utime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;onseq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;offseq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="Hardware"></category><category term="MicroPython"></category><category term="ESP8266"></category><category term="electronics"></category></entry><entry><title>Data recovery from a HDD killed by power surge</title><link href="http://tdt.rocks/data_recovery_from_dead_HDD.html" rel="alternate"></link><published>2017-04-16T03:25:00+03:00</published><updated>2017-04-16T03:25:00+03:00</updated><author><name>James Nzomo</name></author><id>tag:tdt.rocks,2017-04-16:/data_recovery_from_dead_HDD.html</id><summary type="html">&lt;p&gt;A story about how non-backed up data was rescued from oblivion and in the nick of time.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Circa ten years ago, before cloud was practically feasible this side of the
sahara, a CPU was assembled for some &lt;a href="https://en.wikipedia.org/wiki/Small_and_medium-sized_enterprises"&gt;SME&lt;/a&gt; with off the shelf parts featuring,
three 500G hard drives:- 2 in raid 1 config, the last with OS ("the OS disk")
to ran custom written software which stashed its inventory and transactions
data into a MySQL DB.&lt;/p&gt;
&lt;p&gt;Initially, the db data dirctory was stored on the mirrored raid pair but circa 4
years back, the OS got reinstalled and the dummy that did that (yours truly)
forgot to set mysql's datadir on the mirrored disks.&lt;/p&gt;
&lt;h1&gt;Murphy's law fulfilled&lt;/h1&gt;
&lt;p&gt;The "OS disk" went kaput!&lt;/p&gt;
&lt;h1&gt;Finagle's law fulfilled&lt;/h1&gt;
&lt;p&gt;The "OS disk" went kaput 20 days before the owners were to file TAX returns.
They needed the past year's data ASAP.&lt;/p&gt;
&lt;p&gt;On inspection, I found that the OS disk was killed by a surge.
The PCB had a charred &lt;a href="http://www.users.on.net/~fzabkar/HDD/TVS_diode_FAQ.html"&gt;TVS diode&lt;/a&gt; and what appear to be a charred
inductors on the power supply side:-&lt;/p&gt;
&lt;p&gt;&lt;img alt="THE DEAD PCB" src="img/data_recovery_from_dead_hdd/pwnt_pcb.jpg" title="PWNT PCB"&gt;
&lt;strong&gt;&lt;em&gt;fig.1 Top left, burnt TVS diode, top right charred inductors. This clearly wasn't
going to power on.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Somehow, after rummaging around, I managed to get a similar motherboard off a
similar hard drive down to the model number but differing on Firmware and Board
revision.(100535704 REV C and REV D for the donor and dead pcb respectively)&lt;/p&gt;
&lt;p&gt;&lt;img alt="DONOR &amp;amp; THE DEAD PCB" src="img/data_recovery_from_dead_hdd/donor_n_pwnt_pcb.jpg" title="DONOR &amp;amp; PWNT PCB"&gt;
&lt;strong&gt;&lt;em&gt;fig.2 Left:- donor pcb, right:- dead pcb.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Recovery attempt numero uno&lt;/h1&gt;
&lt;p&gt;So with the HDD motherboard swapped, I plugged it in, turned power on and then:-
black screen + blinking underscore. POST was struggling to figure out what
the hell had been pluged into SATA1. There was also a repeated motif of clunking
noise from the now powering on but malfunctioning hard drive.
Multiple retries resulted in a hopeless feels,...but surrender wasn't an option.&lt;/p&gt;
&lt;p&gt;Before throwing in the towel and taking it to data recovery specialists (and
explaining why or who would pay circa 100,000 KES {1K USD at the time of this
writing}), I thought it would be WISE to spend afew hours in
data recovery RTFM.&lt;/p&gt;
&lt;h1&gt;Calibrative adaptive information&lt;/h1&gt;
&lt;p&gt;As far as recovery goes, Hard Drives fall into 3 categories:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Those recoverable from simple PCB swap,&lt;/li&gt;
&lt;li&gt;Those that need a BIOS transplanted,&lt;/li&gt;
&lt;li&gt;Those that have no separate transplantable BIOS. (bios info resides in MCU)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is alot of literature on BIOSes and modern HDDs (google it or see google
juice/references section at bottom) but the long and short of it is the HDD BIOS
stores info that the hard drive's micro controller requires to read the
&lt;a href="http://www.datarecovery.net/articles/hard-drive-system-area.aspx"&gt;System Area which inturn contains calibration and adaptive info unique to the
mechanics of the drive&lt;/a&gt;. This includes manufacturing defect
workarounds and servo specific params. This info is determined and set at the
factory and is probably unique to virtually every modern hard drive that
features a bios.&lt;/p&gt;
&lt;p&gt;Without this, you may as well recycle the drive into a paperweight and make
frizbees out of the platters.&lt;/p&gt;
&lt;p&gt;Back to the three categories. By way of elimination, we already know category 1
is not applicable. The clunking noise was the MCU's quest for access to system
area based on inaccurate BIOS data. Some also say this could have resulted in
a corrupt System Area and irrecoverable data.&lt;/p&gt;
&lt;p&gt;If it was to fall under category 3 (no transplantable BIOS chip data) there
wasn't much I was going to be able to DIY and I would have to trod the 1K USD
path.&lt;/p&gt;
&lt;p&gt;Thankfully that wasn't the case as (after much RTFM) I was able to
locate an 8-pin serial flash memory chip on the dead PCB.&lt;/p&gt;
&lt;h1&gt;Soldering Time!&lt;/h1&gt;
&lt;p&gt;So now, a sane trouble-free future lay in that tiny 8-pin ROM chip. The recommended
way would be to transplant that chip to the donor board but that was not without
risk. If during transplant, it gets more heat than the datasheet specs as its max
or if a pin broke, then everything will have come to nothing!&lt;/p&gt;
&lt;p&gt;So I decided to first focus on resurrecting the dead PCB and its less critical
charred components then transplant the BIOS if that was to come to nought.&lt;/p&gt;
&lt;p&gt;First up, the TVS diode or (Transient Voltage Suppression diode). As the name
suggests, its purpose is to protect circuitry from voltage spikes and probably
incurring damage in the process.&lt;/p&gt;
&lt;p&gt;In our case, this TVS gave up the ghost so that the other components may live to
facilitate recovery another day. Thank you dear diode, I will never forget this
sacrifice.
Anyhow, the solution here was to desolder that as it was shorted and diverting
power supply from the rest of the components.
&lt;img alt="DONOR &amp;amp; THE DEAD PCB" src="img/data_recovery_from_dead_hdd/tvs_fix.png" title="TVS FIX"&gt;
&lt;strong&gt;&lt;em&gt;fig.3 The ressurecting PCB, Left:- Pre TVS diode, Right:- Post TVS diode. (notice the BIOS chip top left)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then there was the charred inductors on the power supply side. There were
suggestions on some forums that they could be simply bridged over Which sort
of made sense and so I went ahead and purged the charred few and linked the
respective PCB pads with a dab of solder so that current may flow into the
board and power the rig.
&lt;img alt="DONOR &amp;amp; THE DEAD PCB" src="img/data_recovery_from_dead_hdd/inductor_fix.png" title="IND FIX"&gt;
&lt;strong&gt;&lt;em&gt;fig.4 The ressurecting PCB Left:- burnt inductors, Right:- One purged and briged.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lastly, I checked that both the 12V and 5V rails weren't shorted to ground
and IMHO, the drive was good to go for power up!&lt;/p&gt;
&lt;h1&gt;RESULT! Recovery WIN!&lt;/h1&gt;
&lt;p&gt;The disk was reunited with the soldered up board and on power-on ALAS! -
it spun up like it was new and the motherboard BIOS even picked it up:-&lt;/p&gt;
&lt;p&gt;&lt;img alt="BIOS RECOGNITION WIN" src="img/data_recovery_from_dead_hdd/bios_recognition_win.jpg" title="BIOS RECOGNITION WIN"&gt;
&lt;strong&gt;&lt;em&gt;fig 5. WIN!. If you went thru the same thing, this image would give you warm fuzzy feeling&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But I wasn't out of the woods yet. There was the possibility that there could
have been further damage and previous recovery methods could have corrupted
the drive.&lt;/p&gt;
&lt;p&gt;Thus In quick succession:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I rebooted into usb live linux key&lt;/li&gt;
&lt;li&gt;rsync-ed /var/lib/mysql out of that failing sucker with the quickness&lt;/li&gt;
&lt;li&gt;and verified that the that a mysql installation could make sense of the rescued datadir
(which it was)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And RESULT! Disaster had been averted!&lt;/p&gt;
&lt;h3&gt;The end!&lt;/h3&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;p&gt;Always back up damnit!&lt;/p&gt;
&lt;h3&gt;Resources, Refs &amp;amp; google juice:-&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hddscan.com/doc/HDD_Tracks_and_Zones.html"&gt;About HDD tracks and zones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.datarecovery.net/articles/hard-drive-system-area.aspx"&gt;An article about the System Area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hddzone.com/hdd_pcb_bios_rom_chip_nvram.html"&gt;Something about HDD BIOSes and recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eadatahandlers.co.ke/"&gt;When all else fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Yn2eL4o-6Eo"&gt;A vidya on recovery drive categories, from one of the experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.users.on.net/~fzabkar/HDD/TVS_diode_FAQ.html"&gt;Some articel on TVS Diodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="data recovery"></category><category term="electronics"></category></entry><entry><title>Linux network interface naming</title><link href="http://tdt.rocks/linux_network_interface_naming.html" rel="alternate"></link><published>2015-12-18T03:25:00+03:00</published><updated>2015-12-18T03:25:00+03:00</updated><author><name>James Nzomo</name></author><id>tag:tdt.rocks,2015-12-18:/linux_network_interface_naming.html</id><summary type="html">&lt;p&gt;About how net-if's get their names - from kernel only naming to biosdevname and systemd-udev schemes.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;If you are running a recent ubuntu release ( &amp;gt; 15.XX ), you've probably noticed
that your net interfaces have been "rebranded". Maybe this noticing came in the
form of your sripts being broken....your &lt;code&gt;/etc/network/if-up.d/XXX&lt;/code&gt; script or
vagrant-libvirt deploy failed because you hard coded an interface name in your
scripts (bad practice which im guilty of). It worked previously on your
old-release, then you had to upgrade...but I digress.&lt;/p&gt;
&lt;p&gt;In this post, I'll try talking about how net devices get their names, the schemes
employed and the tech behind the schemes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;The classic naming scheme - &lt;code&gt;eth&amp;lt;0-n&amp;gt;&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Not so long ago, without any devops intervention, interface names were decided
solely by the Kernel based on the order in which they are enumerated which in
turn is based on the order in which their modules/drivers are loaded and then,
where multiple NICs catered for by the same driver are present, they'd be named
in the order in which they were discovered which in turn is again affected by
the order in which the PCI device list is enumerated.&lt;/p&gt;
&lt;p&gt;When its all done, you'd have something like this :-&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eth&amp;lt;index&amp;gt;&lt;/code&gt; = ethernet, &lt;code&gt;wlan&amp;lt;index&amp;gt;&lt;/code&gt; = wireless, &lt;code&gt;usb&amp;lt;index&amp;gt;&lt;/code&gt; = usbnet - prolly phone-tethered&lt;/p&gt;
&lt;p&gt;While the scheme is good enough to tell about the type of connection, there's
not much in the way of name predictability and telling about the nature of
the hardware that provides a given interface i.e. are &lt;code&gt;eth0&lt;/code&gt; and &lt;code&gt;eth1&lt;/code&gt; provided
by different ports on the same NIC? Is &lt;code&gt;eth2&lt;/code&gt; provided by a USB adapter?&lt;/p&gt;
&lt;p&gt;Another problem is that if you leave it all up to the powers behind the scheme, the
device naming will probably not be the same after kernel, NIC or motherboard
upgrades or sometimes even reboots.&lt;/p&gt;
&lt;p&gt;It's possible to get around the above mentioned limitations using &lt;a href="classic_naming_workarounds"&gt;scripts
and udev rules&lt;/a&gt; but we live in modern times and
techies should not be bothered to jump through those hoops just to sort out
something that should be automagic.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;biosdevname - &lt;code&gt;em&amp;lt;port&amp;gt;&lt;/code&gt;, &lt;code&gt;p&amp;lt;slot&amp;gt;p&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;One of the efforts at bringing order out of chaos is dell's &lt;a href="http://linux.dell.com/biosdevname/"&gt;biosdevname&lt;/a&gt;
project which according to the project description is &lt;q&gt;a udev helper for naming
devices per BIOS names.&lt;/q&gt; This helper-utility determines device names based on
the &lt;q&gt;intended order of network devices&lt;/q&gt; as suggested by the BIOS.&lt;/p&gt;
&lt;p&gt;With the default policy, the naming scheme of it goes like so:-  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On-board net devices get named &lt;code&gt;em&amp;lt;port&amp;gt;[_&amp;lt;virtual instance&amp;gt;]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Add-on NICs devices get named &lt;code&gt;p&amp;lt;slot&amp;gt;p&amp;lt;port&amp;gt;[_&amp;lt;virtual instance&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;where:- &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;em&lt;/code&gt; = &lt;a href="http://linux.dell.com/files/whitepapers/consistent_network_device_naming_in_linux.pdf"&gt;ethernet-on-motherboard&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; = the respective PCI slot,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt; the port number...for multi-port NICs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;virtual instance&amp;gt;&lt;/code&gt; is the SRIOV and/or NPAR instance index&lt;/li&gt;
&lt;li&gt;The "p"s in the Add-on card scheme stand for pci slot and port respectively&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above scheme is implemented here:- &lt;a href="http://linux.dell.com/cgi-bin/cgit.cgi/biosdevname.git/tree/src/naming_policy.c?id=e51172768cec37ab0a350e439d2827b0c4e604a4#n31"&gt;naming_policy.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have the utility installed, you can try it out by booting your kernel
with &lt;code&gt;biosdevname=1&lt;/code&gt; option or just run &lt;code&gt;biosdevname -i eth0 #(swap eth0
with any interface you have)&lt;/code&gt; from the terminal. If conditions are right,
you should get something along the lines of &lt;code&gt;em1&lt;/code&gt; or &lt;code&gt;p1p1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this utility, names are stable, predictable and you can also tell what's embedded
and what's slotted in...but it has it's limitations, one of them being that it doesn't
cater for a wider range of interface types/devices. It refused to name my usb
ethernet dongle.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;systemd udev - &lt;code&gt;eno&amp;lt;index&amp;gt;&lt;/code&gt;, &lt;code&gt;ens&amp;lt;slot&amp;gt;d&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Starting version 197, shortly after udev was absorbed into systemd source
tree, native predictable naming was added to the mix.&lt;/p&gt;
&lt;p&gt;According to &lt;a href="http://wiki.freedesktop.org/www/Software/systemd/PredictableNetworkInterfaceNames/"&gt;the systemd wiki on the topic&lt;/a&gt;, and the
&lt;a href="https://github.com/systemd/systemd/blob/3f65d73149cd0f64eb3fdb0c71f55f6c1133fefe/src/udev/udev-builtin-net_id.c"&gt;systemd-udev sources&lt;/a&gt;, the names are generated based on:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firmware/bios-provided for on-board devices - &lt;code&gt;&amp;lt;type&amp;gt;o&amp;lt;index&amp;gt;[d&amp;lt;dev_port&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;firmware/bios-provided for pci-express hotplug slot - &lt;code&gt;&amp;lt;type&amp;gt;s&amp;lt;slot&amp;gt;[f&amp;lt;function&amp;gt;][d&amp;lt;dev_port&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;physical/geographical location for PCI devices -&lt;br&gt;
&lt;code&gt;&amp;lt;type&amp;gt;[P&amp;lt;domain&amp;gt;]p&amp;lt;bus&amp;gt;s&amp;lt;slot&amp;gt;[f&amp;lt;function&amp;gt;][[d&amp;lt;dev_port&amp;gt;]|[u&amp;lt;port&amp;gt;][..][c&amp;lt;config&amp;gt;][i&amp;lt;interface&amp;gt;]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the devices's MAC address - &lt;code&gt;&amp;lt;type&amp;gt;x&amp;lt;MAC&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; is a two character prefix that tells the nature of the device/connection:-
&lt;code&gt;en&lt;/code&gt; for ethernet, &lt;code&gt;sl&lt;/code&gt; = &lt;a href="https://tools.ietf.org/html/rfc1055"&gt;Serial Line Internet Protocol&lt;/a&gt;,
&lt;code&gt;wl&lt;/code&gt; = Wireless LAN/Wi-Fi and &lt;code&gt;ww&lt;/code&gt; for Wireless WAN (LTE/3g device, probably even WiMAX)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;domain&amp;gt;&lt;/code&gt; is pci device domain.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;function&amp;gt;&lt;/code&gt; = SRIOV(or maybe also NPAR?) number for multi-function PCI devices.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&amp;lt;port&amp;gt;&lt;/code&gt; is a usb port&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus for example &lt;code&gt;eno1&lt;/code&gt; is an onboard ethernet device, &lt;code&gt;enp8s0&lt;/code&gt; should be an
ethernet interface provided by a device on bus #8 slot #0 with only 1 port and
&lt;code&gt;wlp9s0&lt;/code&gt; should be an wlan interface provided by device on bus #9 slot #0.&lt;/p&gt;
&lt;p&gt;On trying out a usb ethernet dongle, I got &lt;code&gt;enp0s29f7u1&lt;/code&gt; and going by the
location/path scheme we can tell that it's an ethernet interface provided by a
usb device connected to a usb controller on PCI bus #0, device #29, with function #7
plugged into usb port #1.&lt;/p&gt;
&lt;h3&gt;systemd-udev Naming Policy&lt;/h3&gt;
&lt;p&gt;Net devices may have more than one name generated for them which you can
view by querying the udev database (filtering the results):-  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;udevadm info -q property -p /sys/class/net/ens33 &lt;span class="p"&gt;|&lt;/span&gt; grep ID_NET_NAME
&lt;span class="nv"&gt;ID_NET_NAME_MAC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enx112233445566
&lt;span class="nv"&gt;ID_NET_NAME_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp2s0
&lt;span class="nv"&gt;ID_NET_NAME_SLOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ens33
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, we have names by mac, location and bios provided index.
The choice of name is determined by a list if policies defined for &lt;code&gt;NamePolicy&lt;/code&gt;
in the respective link config file (see &lt;code&gt;man systemd.link&lt;/code&gt;). To find out what
link file is in use, query udevadm like so:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;udevadm info -q property -p /sys/class/net/ens33 &lt;span class="p"&gt;|&lt;/span&gt; grep LINK_FILE
&lt;span class="nv"&gt;ID_NET_LINK_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/lib/systemd/network/99-default.link
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I get 99-default.link, contents of which are:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /lib/systemd/network/99-default.link
&lt;span class="o"&gt;[&lt;/span&gt;Link&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;NamePolicy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kernel database onboard slot path
&lt;span class="nv"&gt;MACAddressPolicy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;persistent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at the &lt;code&gt;NamePolicy&lt;/code&gt; entry, the precedence is defined by the order
in which they appear and the first successful one is used to set the device name.
In this case with ens33 being chosen, &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;onboard&lt;/code&gt; failed,
&lt;code&gt;slot&lt;/code&gt; passed and &lt;code&gt;path&lt;/code&gt; wasn't considered.&lt;/p&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;p&gt;systemd-udev is now standard on most big name distros (ubuntu included) and has
naturally superseded biosdevname where it reigned. There is no need to sweat it out
with unpredictable interface names like the techies of yesterday but just in case
you want to, you can disable all manner of predictability by passing &lt;code&gt;net.ifnames=0&lt;/code&gt;
and &lt;code&gt;biosdevname=0&lt;/code&gt; to the kernel at boot time.&lt;/p&gt;
&lt;h3&gt;Resources, Refs &amp;amp; google juice:-&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.freedesktop.org/www/Software/systemd/PredictableNetworkInterfaceNames/" target="_blank"&gt;wiki.freedesktop.org article on the subject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/systemd/systemd/blob/3f65d73149cd0f64eb3fdb0c71f55f6c1133fefe/src/udev/udev-builtin-net_id.c" target="_blank"&gt;Well commented source on systemd net-dev naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.dell.com/biosdevname/" target="_blank"&gt;biosdevname homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.dell.com/cgi-bin/cgit.cgi/biosdevname.git/tree/src/naming_policy.c?id=e51172768cec37ab0a350e439d2827b0c4e604a4#n31" target="_blank"&gt;biosdevname naming policy source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ivi.fnwi.uva.nl/sne/air//wiki/LogicalInterfaceNames/" target="_blank"&gt;An ice article on classic naming scheme and problem workarounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B00PKTGLWM?psc=1&amp;amp;redirect=true&amp;amp;ref_=oh_aui_d_detailpage_o00" target="_blank"&gt;How Linux Works: What Every Superuser Should Know&lt;/a&gt; by Brian Ward&lt;/li&gt;
&lt;/ul&gt;</content><category term="linux"></category><category term="systemd"></category><category term="network interfaces"></category></entry><entry><title>Setting up a repo cache with NGINX</title><link href="http://tdt.rocks/repo_cache_ft_nginx.html" rel="alternate"></link><published>2015-12-14T03:25:00+03:00</published><updated>2015-12-14T03:25:00+03:00</updated><author><name>James Nzomo</name></author><id>tag:tdt.rocks,2015-12-14:/repo_cache_ft_nginx.html</id><summary type="html">&lt;p&gt;A simple how to on setting up a linux package manager repo cache for those situations where a full blown mirror would be simply overkill.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Say you have a ton of Linux hosts package managed by apt or rpm. Maybe it's
a cluster, cloud env or just a simple learner's lab where a large groups of
(if not all) nodes will end up with the same or similar set of packages
installed and/or upgraded.&lt;/p&gt;
&lt;p&gt;Local Linux repo mirrors would be a fantastic time &amp;amp; bandwidth saver for such
a setup...but the thought of dedicating double, triple or quadruple digit Gigs
(my &lt;a href="pages/glossary#wag"&gt;WAG&lt;/a&gt; as at Dec 2015 - depending on desired distros &amp;amp; architectures)
and the high probability that swathes of space will go wasted on packages
no one will ever install should be enough to make you seek a more optimal
option.&lt;/p&gt;
&lt;p&gt;What you probably want is a good repository caching proxy that initially fetches
a pkg when a host has first dibs request, then stores and serves the same pkg
for subsequent matching requests.&lt;/p&gt;
&lt;h1&gt;The Setup&lt;/h1&gt;
&lt;p&gt;There's infinite ways to go about this. This post will cover how it's done using
webserver reverse proxy caching feature to handle requests on behalf of a few
upstream/origin repo servers.&lt;/p&gt;
&lt;p&gt;For more info on the general idea/concept, see:-
&lt;a href="(https://trafficserver.readthedocs.org/en/5.3.x/admin/reverse-proxy-http-redirects.en.html)"&gt;trafficserver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Though it's possible with
&lt;a href="https://httpd.apache.org/docs/2.4/caching.html"&gt;Apache2&lt;/a&gt;,
&lt;a href="http://redmine.lighttpd.net/projects/1/wiki/Docs_ModCache"&gt;lighthttpd&lt;/a&gt; or even
&lt;a href="http://trafficserver.apache.org"&gt;trafficserver&lt;/a&gt; we'll just go with
&lt;a href="https://www.nginx.com/blog/nginx-caching-guide/"&gt;NGINX&lt;/a&gt; for no apparent reason.&lt;/p&gt;
&lt;p&gt;So start by grabbing yourself some webserver:- &lt;code&gt;apt-get install nginx&lt;/code&gt; and we'll sort this
out in one simple sites-available config.&lt;/p&gt;
&lt;h3&gt;The NGINX config&lt;/h3&gt;
&lt;p&gt;The following minimal config sets nginx to handle this biz for the ubuntu
repos defined there in. Read on...this section continues inside the conf file as comments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;upstream&lt;/span&gt; &lt;span class="nv"&gt;directive&lt;/span&gt; &lt;span class="nv"&gt;defining&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;upstream&lt;/span&gt; &lt;span class="nv"&gt;repo&lt;/span&gt; &lt;span class="nv"&gt;hosts&lt;/span&gt;
# &lt;span class="nv"&gt;see&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;nginx&lt;/span&gt;.&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ngx_http_upstream_module&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;
# &lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;backup&lt;/span&gt;. &lt;span class="nv"&gt;You&lt;/span&gt; &lt;span class="nv"&gt;can&lt;/span&gt; &lt;span class="nv"&gt;have&lt;/span&gt; &lt;span class="nv"&gt;more&lt;/span&gt; &lt;span class="nv"&gt;than&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt;.
# &lt;span class="nv"&gt;NGINX&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;try&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;balance&lt;/span&gt; &lt;span class="nv"&gt;between&lt;/span&gt; &lt;span class="nv"&gt;them&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;weighted round-robin&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
# &lt;span class="nv"&gt;algorithm&lt;/span&gt;.
# &lt;span class="nv"&gt;Most&lt;/span&gt; &lt;span class="nv"&gt;requests&lt;/span&gt; &lt;span class="nv"&gt;go&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt;, &lt;span class="nv"&gt;fewer&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;rest&lt;/span&gt;.
# &lt;span class="nv"&gt;Error&lt;/span&gt; &lt;span class="nv"&gt;retries&lt;/span&gt; &lt;span class="nv"&gt;trickle&lt;/span&gt; &lt;span class="nv"&gt;down&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;definitions&lt;/span&gt;. &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;last&lt;/span&gt; &lt;span class="nv"&gt;errs&lt;/span&gt;,
# &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;passed&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt;.
# &lt;span class="nv"&gt;By&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;found&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;one&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;unreachable&lt;/span&gt; &lt;span class="nv"&gt;during&lt;/span&gt; &lt;span class="nv"&gt;startup&lt;/span&gt;, &lt;span class="nv"&gt;nginx&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt;
# &lt;span class="nv"&gt;kaput&lt;/span&gt; &lt;span class="nv"&gt;leaving&lt;/span&gt; &lt;span class="nv"&gt;clues&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;log&lt;/span&gt;.
&lt;span class="nv"&gt;upstream&lt;/span&gt; &lt;span class="nv"&gt;ubuntu&lt;/span&gt; {
  &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;ke&lt;/span&gt;.&lt;span class="nv"&gt;archive&lt;/span&gt;.&lt;span class="nv"&gt;ubuntu&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;archive&lt;/span&gt;.&lt;span class="nv"&gt;ubuntu&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt; &lt;span class="nv"&gt;backup&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}

# &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;directive&lt;/span&gt; &lt;span class="nv"&gt;configures&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt;. &lt;span class="nv"&gt;Storage&lt;/span&gt; &lt;span class="nv"&gt;et&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt;. &lt;span class="nv"&gt;You&lt;/span&gt; &lt;span class="nv"&gt;may&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt;
# &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;storage&lt;/span&gt; &lt;span class="nv"&gt;location&lt;/span&gt;  &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;mount&lt;/span&gt; &lt;span class="nv"&gt;point&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;filesystem&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;separate&lt;/span&gt; &lt;span class="nv"&gt;storage&lt;/span&gt;
# &lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;backend&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;match&lt;/span&gt;.
# &lt;span class="nv"&gt;see&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;nginx&lt;/span&gt;.&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ngx_http_proxy_module&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;#&lt;span class="nv"&gt;proxy_cache_path&lt;/span&gt;.
&lt;span class="nv"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;repo_mirror&lt;/span&gt; # &lt;span class="nv"&gt;defines&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;stashed&lt;/span&gt;

        # &lt;span class="nv"&gt;defines&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nv"&gt;heirarchy&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yaani&lt;/span&gt; &lt;span class="nv"&gt;num&lt;/span&gt; &lt;span class="nv"&gt;directory&lt;/span&gt; &lt;span class="nv"&gt;levels&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;levels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;

        # &lt;span class="nv"&gt;defines&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;zone&lt;/span&gt; &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt; &lt;span class="nv"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;stashed&lt;/span&gt;.
        # &lt;span class="nv"&gt;Servers&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;lookup&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt;
        &lt;span class="nv"&gt;keys_zone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;repository_cache&lt;/span&gt;:&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;

        # &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;access&lt;/span&gt; &lt;span class="nb"&gt;timeout&lt;/span&gt;. &lt;span class="nv"&gt;Pkgs&lt;/span&gt; &lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="nv"&gt;nuked&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;access&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="nv"&gt;days&lt;/span&gt;.
        &lt;span class="nv"&gt;inactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;

        # &lt;span class="nv"&gt;Cache&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="nv"&gt;limit&lt;/span&gt;
        &lt;span class="nv"&gt;max_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

# &lt;span class="nv"&gt;Our&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;
&lt;span class="nv"&gt;server&lt;/span&gt; {

  # &lt;span class="nv"&gt;Keep&lt;/span&gt; &lt;span class="nv"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;eyes&lt;/span&gt; &lt;span class="nv"&gt;peeled&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
  &lt;span class="nv"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

  # &lt;span class="nv"&gt;Location&lt;/span&gt; &lt;span class="nv"&gt;directive&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ubuntu&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;
  &lt;span class="nv"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ubuntu&lt;/span&gt; {
    # &lt;span class="nv"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;cache&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;s root&lt;/span&gt;
    &lt;span class="nv"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;repo_mirror&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;index_data&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

    # &lt;span class="nv"&gt;look&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;packages&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;order&lt;/span&gt;
    &lt;span class="nv"&gt;try_files&lt;/span&gt; $&lt;span class="nv"&gt;uri&lt;/span&gt; @&lt;span class="nv"&gt;ubuntu&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
  }

  # &lt;span class="nv"&gt;Location&lt;/span&gt; &lt;span class="nv"&gt;directive&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;named&lt;/span&gt; &lt;span class="nv"&gt;location&lt;/span&gt; &lt;span class="nv"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;above&lt;/span&gt;
  &lt;span class="nv"&gt;location&lt;/span&gt; @&lt;span class="nv"&gt;ubuntu&lt;/span&gt; {

    # &lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;upstream&lt;/span&gt; &lt;span class="nv"&gt;definition&lt;/span&gt; &lt;span class="nv"&gt;above&lt;/span&gt;
    &lt;span class="nv"&gt;proxy_pass&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;ubuntu&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

    # &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="nv"&gt;days&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;caching&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;
    &lt;span class="nv"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

    # &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;our&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;repository_cache&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;zone&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;caching&lt;/span&gt;
    &lt;span class="nv"&gt;proxy_cache&lt;/span&gt; &lt;span class="nv"&gt;repository_cache&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

    # &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="nv"&gt;stale&lt;/span&gt; &lt;span class="nv"&gt;cached&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;events&lt;/span&gt; &lt;span class="nv"&gt;defined&lt;/span&gt;
    &lt;span class="nv"&gt;proxy_cache_use_stale&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="nb"&gt;timeout&lt;/span&gt; &lt;span class="nv"&gt;invalid_header&lt;/span&gt; &lt;span class="nv"&gt;updating&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

    # &lt;span class="nv"&gt;pass&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;backup&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;events&lt;/span&gt; &lt;span class="nv"&gt;defined&lt;/span&gt;
    &lt;span class="nv"&gt;proxy_next_upstream&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="nb"&gt;timeout&lt;/span&gt; &lt;span class="nv"&gt;invalid_header&lt;/span&gt; &lt;span class="nv"&gt;http_500&lt;/span&gt; &lt;span class="nv"&gt;http_502&lt;/span&gt; &lt;span class="nv"&gt;http_503&lt;/span&gt; &lt;span class="nv"&gt;http_504&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above config is by no means comprehensive but it works good enough as a demo. Feel free
to copy paste it into &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One enhancement that can be made to all this is to configure a reliable storage device for
cache store.&lt;/p&gt;
&lt;h3&gt;The client side&lt;/h3&gt;
&lt;p&gt;It goes without saying that repo related requests have to somehow be routed to the
proxy in order for all this to work.&lt;/p&gt;
&lt;p&gt;One way is to modify the client's &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; or &lt;code&gt;/etc/yum.repos.d/CentOS-*.repo&lt;/code&gt;
to point to our server.&lt;/p&gt;
&lt;p&gt;Another would be to try intercept requests using various forms of MITM sorcery
like forging faux DNS replies for repo FQDNs or router configs/rules.&lt;/p&gt;
&lt;p&gt;Since the client hosts can be configured in most cases and the latter
option is in grey area territory, we'll go with the former and modify the
repo configs. Read on to the next section for that (because the writer wrote
that before the one you reading now and he cannot be bothered to repeat
himself or make mods to the article at this point).&lt;/p&gt;
&lt;h1&gt;Bonus vagrant-ansible deploy material&lt;/h1&gt;
&lt;p&gt;Just in case you'd like to test all this, or would like some CM to deploy the same
IRL, there is a rudimentary
&lt;a href="https://github.com/mrmoje/repo_cache_plays_staring_nginx"&gt;"demo setup git repo"&lt;/a&gt;
complete with ansible plays and a four host vagrant playground - one "repo-cacher"
and three clients - ubuntu trusty, debian jessie and CentOS 7 - which upon successful
&lt;code&gt;vagrant up&lt;/code&gt;, will be provisioned to fetch their stuff from the repo-cacher.&lt;/p&gt;
&lt;p&gt;To try it out! In case you haven't already, feel free to install latest:-
&lt;a href="https://www.vagrantup.com/downloads"&gt;Vagrant&lt;/a&gt;,
&lt;a href="https://docs.ansible.com/ansible/intro_installation.html"&gt;Ansible&lt;/a&gt; and
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;virtualbox&lt;/a&gt;.
The whole #! will take a while to install, especially if running &lt;code&gt;vagrant up XXXXX&lt;/code&gt;
for the first time and from a poor connection, but IMHO similar IRL bare metal
setup would probably take much longer to depoy.&lt;/p&gt;
&lt;p&gt;Details on how the vagrant and ansible stuff comes together will be blawged in a future
post. For now, checkout the (currently empty)
&lt;a href="https://github.com/mrmoje/repo_cache_plays_staring_nginx/blob/master/README.md"&gt;README&lt;/a&gt;
or just run &lt;code&gt;vagrant up repo-cache&lt;/code&gt; to launch the repo cache then &lt;code&gt;vagrant ssh repo-cache&lt;/code&gt;
and open &lt;code&gt;/etc/nginx/sites-available/repo-cache.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Have a look at the tri-distro proxy cache config and feel free to mod as you please.
Reset it all by running &lt;code&gt;vagrant provision repo-cache&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should also be able to browse the upstream repos via the proxy from the following links:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://repo-cache.local/ubuntu/"&gt;http://repo-cache.local/ubuntu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://repo-cache.local/debian/"&gt;http://repo-cache.local/debian/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://repo-cache.local/centos/"&gt;http://repo-cache.local/centos/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: Replace the hostname with &lt;code&gt;10.64.0.2&lt;/code&gt; if you dont have a mdns client installed.&lt;/p&gt;
&lt;p&gt;You can subsequently launch one, two or all of the other client hosts
&lt;code&gt;vagrant up repo-cache ubuntu #(or debian or centos)&lt;/code&gt;. Feel free to &lt;code&gt;vagrant ssh&lt;/code&gt; into
them, take a look at &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; or &lt;code&gt;/etc/yum.repos.d/CentOS-*.repo&lt;/code&gt; and
give some package installs a run. Don't forget to peek at &lt;code&gt;repo-cache:/var/repo_mirror&lt;/code&gt;
while you do that.&lt;/p&gt;
&lt;p&gt;Look at the &lt;a href="https://github.com/mrmoje/repo_cache_plays_ft_nginx/blob/master/Vagrantfile"&gt;Vagrant&lt;/a&gt;
file to see hodge-podge of provisioning methods and the
&lt;a href="https://www.gnu.org/software/sed/manual/sed.html"&gt;sedding&lt;/a&gt; that swaps the vanilla repos
for our example proxy.&lt;/p&gt;
&lt;h1&gt;Outro&lt;/h1&gt;
&lt;p&gt;We put a &lt;a href="https://github.com/kili/playbooks/blob/master/playbooks/repository_cache.yaml"&gt;variant of this proxy-cache&lt;/a&gt;
method to good use at a cloud compute startup I used to work for and it worked
out well for us and our tenants.&lt;/p&gt;
&lt;p&gt;In the end amongst other benefits, we were (obviously) able to reduce latency and
network traffic (by how much is anyones guess. We didn't care measure).
We also ended up with more space to put to good use. Space that would have otherwise
been taken up by a multi repo mirror.&lt;/p&gt;
&lt;p&gt;The only possible downside I can fathom for this is that it will still
take longer for the first host/request to get sorted which may be bad for
the installing party depending on how pressed for time they are, but then again
with life, every now and then, somebody has to take one for the team. C'est la Vie!&lt;/p&gt;
&lt;h3&gt;Resources, Refs &amp;amp; google juice:-&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="(https://trafficserver.readthedocs.org/en/5.3.x/admin/reverse-proxy-http-redirects.en.html)"&gt;Trafficserver dox on reverse proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="(http://nginx.org/en/docs/http/ngx_http_proxy_module.html)"&gt;NGINX proxy module documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An excelent tut on caching with nginx with video &amp;amp; docker hands-on:- &lt;a href="http://czerasz.com/2015/03/30/nginx-caching-tutorial/"&gt;http://czerasz.com/2015/03/30/nginx-caching-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nginx"></category><category term="proxy"></category><category term="cache"></category><category term="linux packages"></category></entry><entry><title>TEST POST</title><link href="http://tdt.rocks/testing.html" rel="alternate"></link><published>1969-12-31T23:59:59+03:00</published><updated>1969-12-31T23:59:59+03:00</updated><author><name>James Nzomo</name></author><id>tag:tdt.rocks,1969-12-31:/testing.html</id><summary type="html">&lt;p&gt;A simple test post...complete with a PAL test pattern and an annoying complementary 1KHz tone - just for your ears.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;center&gt;
&lt;img alt="PM5544" src="https://upload.wikimedia.org/wikipedia/commons/c/c4/PM5544_with_non-PAL_signals.png"&gt;&lt;/p&gt;
&lt;h2&gt;Problem? &amp;rarr; &lt;button onclick=osc.stop()&gt;STFU!&lt;/button&gt;&lt;/h2&gt;
&lt;p&gt;&lt;/center&gt;
&lt;script type="text/javascript"&gt;
var context = new AudioContext();
var osc = context.createOscillator();
var vol = context.createGain();
osc.frequency.value = 1000;
vol.gain.value = 0.1;
osc.connect(vol);
vol.connect(context.destination);
osc.start(0);
// Problem?
//osc.stop();
&lt;/script&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h1&gt;TEST CONTENT&lt;/h1&gt;
&lt;p&gt;with placeholder text generated at &lt;a href="http://slipsum.com/"&gt;Samuel L. Ipsum&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;h4&gt;H4&lt;/h4&gt;
&lt;h5&gt;H5&lt;/h5&gt;
&lt;h6&gt;H6&lt;/h6&gt;
&lt;h1&gt;Underline-H1&lt;/h1&gt;
&lt;h2&gt;Underline-H2&lt;/h2&gt;
&lt;h3&gt;Formatting&lt;/h3&gt;
&lt;p&gt;Asterisks -&amp;gt; &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;bold italic&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Underscores -&amp;gt; &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;bold italic&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;monospace&lt;/code&gt;&lt;br&gt;
~~~strikethrough text~~~&lt;/p&gt;
&lt;h3&gt;Paragraph one&lt;/h3&gt;
&lt;p&gt;Now that there is the Tec-9, a crappy spray gun from South Miami. This gun is
advertised as the most popular gun in American crime. Do you believe that shit?
It actually says that in the little book that comes with it: the most popular
gun in American crime. Like they're actually proud of that shit.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//function sets&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;set_portAbit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sPORTA&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sPORTA&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;PORTA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sPORTA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Paragraph two&lt;/h3&gt;
&lt;p&gt;Well, the way they make shows is, they make one show. That show's called a pilot.
Then they show that show to the people who make shows, and on the strength of
that one show they decide if they're going to make more shows. Some pilots get
picked and become television programs. Some don't, become nothing.
She starred in one of the ones that became nothing.&lt;/p&gt;
&lt;h3&gt;Paragraph three block quotes&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Your bones don't break, mine do. That's clear. Your cells react to bacteria and
viruses differently than mine. You don't get sick, I do. That's also clear. But
for some reason, you and I react the exact same way to water. We swallow it too
fast, we choke. We get some in our lungs, we drown. However unreal it may seem,
we are connected, you and I. We're on the same curve, just on opposite ends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Longer Code block&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;xc.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// #pragma config statements should precede project file includes.&lt;/span&gt;
&lt;span class="c1"&gt;// Use project enums instead of #define for ON and OFF.&lt;/span&gt;

&lt;span class="c1"&gt;// CONFIG&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config FOSC = INTOSCIO  &lt;/span&gt;&lt;span class="c1"&gt;// Oscillator Selection bits (INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config WDTE = OFF       &lt;/span&gt;&lt;span class="c1"&gt;// Watchdog Timer Enable bit (WDT disabled)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config PWRTE = ON       &lt;/span&gt;&lt;span class="c1"&gt;// Power-up Timer Enable bit (PWRT enabled)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config MCLRE = ON       &lt;/span&gt;&lt;span class="c1"&gt;// RA5/MCLR/VPP Pin Function Select bit (RA5/MCLR/VPP pin function is MCLR)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config BOREN = ON       &lt;/span&gt;&lt;span class="c1"&gt;// Brown-out Detect Enable bit (BOD enabled)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config LVP = OFF        &lt;/span&gt;&lt;span class="c1"&gt;// Low-Voltage Programming Enable bit (RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config CPD = OFF        &lt;/span&gt;&lt;span class="c1"&gt;// Data EE Memory Code Protection bit (Data memory code protection off)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma config CP = OFF         &lt;/span&gt;&lt;span class="c1"&gt;// Flash Program Memory Code Protection bit (Code protection off)&lt;/span&gt;

&lt;span class="cp"&gt;#define DEBUG&lt;/span&gt;

&lt;span class="cp"&gt;#define _XTAL_FREQ   4000000 &lt;/span&gt;&lt;span class="c1"&gt;// needed by some macros&lt;/span&gt;
&lt;span class="cp"&gt;#define FCY _XTAL_FREQ/4&lt;/span&gt;

&lt;span class="c1"&gt;// Comm Setup&lt;/span&gt;
&lt;span class="cp"&gt;#define BAUDRATE 1200&lt;/span&gt;


&lt;span class="cp"&gt;#define BUZZER_PIN RB5&lt;/span&gt;
&lt;span class="cp"&gt;#define TOGGLE_BUZZER_PIN BUZZER_PIN = ~BUZZER_PIN;&lt;/span&gt;

&lt;span class="c1"&gt;//Globals&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; 
    &lt;span class="n"&gt;receive_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;//cmd reveive buffer&lt;/span&gt;
    &lt;span class="n"&gt;sPORTA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//PORTA Shadow register&lt;/span&gt;


&lt;span class="c1"&gt;//Prototypes&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="nf"&gt;BOARD_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;USART_putc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;buzz_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;buzz_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;set_portAbit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;interrupt&lt;/span&gt; &lt;span class="nf"&gt;ISR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;USART_getc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Main function&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;BOARD_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;INIT!&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;buzz_ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr&gt;
&lt;p&gt;List of Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tdt.rocks"&gt;TDT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kili.io"&gt;KILI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nairobilug.or.ke"&gt;NLUG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Numbered list of links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/OpenStack-Nairobi/"&gt;Openstack Nairobi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Python-Nairobi/"&gt;Python Nairobi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Openstack Nairobi&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.meetup.com/OpenStack-Nairobi&lt;/li&gt;
&lt;li&gt;https://wiki.openstack.org/wiki/Main_Page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Nairobi&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.meetup.com/Python-Nairobi&lt;/li&gt;
&lt;li&gt;https://github.com/Python-Nairobi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="testing"></category></entry></feed>